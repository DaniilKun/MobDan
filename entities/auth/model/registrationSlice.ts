import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios'; // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π axios
import { IRegistrationRequest, IRegistrationResponse, RegistrationState } from './auth.model';
import { API } from '@/api/api';
import axiosPublicInstance from '@/api/axiosPublicInstance';

const initialState: RegistrationState = {
	message: '',
	isLoading: false,
	error: null,
};

// ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π thunk –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export const registration = createAsyncThunk<IRegistrationResponse, IRegistrationRequest>(
	'auth/registration',
	async ({ username, password, email }, { rejectWithValue }) => {
		try {
			console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');
			const { data } = await axiosPublicInstance.post<IRegistrationResponse>(API.registration, {
				username,
				password,
				email,
			});

			console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
			return data;
		} catch (error) {
			if (axios.isAxiosError(error)) {
				console.error('‚ùå Registration error:', error.response?.data);
				return rejectWithValue(error.response?.data || { general: ['Registration error'] });
			}
			throw error;
		}
	},
);

const registrationSlice = createSlice({
	name: 'registration',
	initialState,
	reducers: {},
	extraReducers: (builder) => {
		builder
			.addCase(registration.pending, (state) => {
				state.isLoading = true;
				state.error = null;
			})
			.addCase(registration.fulfilled, (state, action) => {
				state.isLoading = false;
				state.message = action.payload.message;
				state.error = null;
			})
			.addCase(registration.rejected, (state, action) => {
				state.isLoading = false;
				// –ï—Å–ª–∏ `action.payload` —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
				if (action.payload && typeof action.payload === 'object') {
					state.error = action.payload as Record<string, string[]>; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –æ—à–∏–±–æ–∫
				} else if (action.error.message) {
					// –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
					state.error = { general: [action.error.message] };
				} else {
					// –û–±—â–∞—è –æ—à–∏–±–∫–∞
					state.error = { general: ['An unexpected error occurred'] };
				}
			});
	},
});

export default registrationSlice.reducer;
