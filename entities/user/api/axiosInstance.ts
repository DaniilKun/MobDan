import axios from 'axios';
import { PREFIX } from './api';
import store from '@/store/store';
import { refreshToken } from '@/entities/auth/model/authSlice';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { IAuthResponse } from '@/entities/auth/model/auth.model'; // ‚úÖ –ò–º–ø–æ—Ä—Ç —Ç–∏–ø–∞

const axiosInstance = axios.create({
	baseURL: PREFIX,
	headers: {
		'Content-Type': 'application/json',
	},
});

// ‚úÖ –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
axiosInstance.interceptors.request.use(
	async (config) => {
		const state = store.getState();
		let token = state.auth.access_token;

		// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Redux, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ AsyncStorage
		if (!token) {
			token = await AsyncStorage.getItem('access_token');
		}

		console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', token);

		if (token) {
			config.headers.Authorization = `Bearer ${token}`;
		}

		return config;
	},
	(error) => Promise.reject(error),
);

// ‚úÖ –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
axiosInstance.interceptors.response.use(
	(response) => response,
	async (error) => {
		const originalRequest = error.config;

		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 (Unauthorized) –∏ –∑–∞–ø—Ä–æ—Å –µ—â–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª—Å—è
		if (error.response?.status === 401 && !originalRequest._retry) {
			originalRequest._retry = true;

			try {
				// ‚úÖ –¢–∏–ø–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ refreshToken
				const result = (await store.dispatch(refreshToken())) as { payload: IAuthResponse };

				if (result.payload?.access) {
					// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
					axiosInstance.defaults.headers['Authorization'] = `Bearer ${result.payload.access}`;
					return axiosInstance(originalRequest); // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
				}
			} catch (refreshError) {
				return Promise.reject(refreshError);
			}
		}

		return Promise.reject(error);
	},
);

export default axiosInstance;
